server:
  port: 8080

spring:
#  redis:
#    host: ${REDIS_HOST:localhost}
#    port: ${REDIS_PORT:6379}
#    time-to-live: 84600

  data:
    mongodb:
      uri: mongodb+srv://admin:newpass@dannhanong.0qmy0.mongodb.net/jobs_auth?retryWrites=true&w=majority&appName=dannhanong&ssl=true&tlsAllowInvalidCertificates=true&tlsAllowInvalidHostnames=true

  kafka:
    # bootstrap-servers: ${KAFKA_HOST:https://special-giggle-4jjqppww6rj435rwg-9094.app.github.dev}:${KAFKA_PORT:9094}
    bootstrap-servers: ${KAFKA_HOST:103.216.117.244}:${KAFKA_PORT:9095}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      group-id: identity-group  # Thay đổi group-id
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring:
          deserializer:
            value:
              delegate:
                class: org.springframework.kafka.support.serializer.JsonDeserializer
          json:
            trusted:
              packages: "*"
            type:
              mapping: ocr_test:com.dan.events.dtos.OcrTestMessage
            value:
              default:
                type: com.dan.events.dtos.OcrTestMessage
            use:
              type:
                headers: true

eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_URL:http://localhost:9999/eureka/}
  instance:
    prefer-ip-address: true

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always

feign:
  multipart:
    enabled: true

oauth2:
  identity:
    client-id: ${CLIENT_ID:1}
    client-secret: ${CLIENT_SECRET:1}
    redirect-uri: ${REDIRECT_URI:1}